.data 
newline: .asciiz "\n"
space: .asciiz " " 
msg_rows: .asciiz "Enter number of rows :"
msg_columns: .asciiz "Enter number of columns :"
msg_input: .asciiz "Enter matrix ( row major form ) : "
mat1: .space 100 
input: .space 100 

.text 	
main:
	li $v0, 4
    	la $a0, msg_rows
    	syscall
    
    	li $v0, 5
   	 syscall
    	move $t0, $v0  # $t0 = number of rows

    	li $v0, 4
    	la $a0, msg_columns
    	syscall

    	li $v0, 5
    	syscall
    	move $t1, $v0  # $t1 = number of columns

    	li $v0, 4
    	la $a0, msg_input
    	syscall
 
   	li $v0, 8             # syscall for read_str
    	la $a0, input     # Load address of input buffer
    	li $a1, 100         # Maximum length
	syscall
   
    	la $t2, input
    	la $t3, mat1
	
	li $t5, 0 
	
    	# t2 - address of input string 
    	# t3 - address of matrix 
   	# t4 - used to iterate through string
    	# t5 - used to calculate number 
    	
input_loop:
    	lb $t4, 0($t2)
    	beq $t4, 32, store 

# when a space is detected add the number calculated to the array and continue

   	beq $t4, $zero , end_input
   	
   	#In ASCII encoding, the decimal value 32 corresponds to the space character (' ')
   	#This loop exist to calculate numbers that have more than one digit , since our input is a string 
	# we need to iterate and add the characters until we detect a space 
	
    	sub $t6 , $t4, 48 # converts character to integer 
    	
    	# for calculating the number
    	mul $t5, $t5, 10  
    	add $t5, $t5, $t6
    	addi $t2, $t2, 1
    	
    	j input_loop  
store:		
    	sw $t5, 0($t3) #store the number obtained in the 2D-array 
    
    	addi $t3, $t3, 4 #increment the address to next memory block 
    	li $t5, 0
   
   	add $t2 , $t2 , 1  #increment the index of string
    	j input_loop      #loop back to the input to continue iteration of string
  
end_input : 	
	
	li $t6 , 0         # Initialize row index
	la $t8, mat1       # Load address of array for printing 
	
	li $v0, 4 	
    	la $a0, newline 
    	syscall
 
print_loop:
	beq $t6 , $t0 , end_programme
	li $t7 , 0           # Initialize column index
	
print_column_loop:
    	lw $t9 , 0($t8)     # Load number from array
    	li $v0, 1          # syscall for print_int
    	move $a0, $t9      # Load number to print
    	syscall

    	li $v0, 4              # syscall for print_str
    	la $a0, space      # Load address of space
    	syscall

    	addi $t7, $t7, 1   # Increment column index
    	addi $t8 , $t8 , 4 # Increment base address 
    	blt $t7, $t1 , print_column_loop # Print all elements in the row

	# Print newline after each row
	li $v0 , 4 
	la $a0 , newline 
	syscall 

	# Reset column index for next row
	li $t7 , 0
	
	# Increment row index
	addi $t6 , $t6 , 1 

	j print_loop
	
end_programme :
	li $v0, 10         # syscall for exit
    	syscall
